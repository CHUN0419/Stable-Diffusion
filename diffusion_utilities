{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP+ZI9ncEh5FIqtZ9j7Rvff"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"IzDPwDOCliuh"},"outputs":[],"source":["class UnetDown(nn.Module):\n","    def __init__(self, in_size, out_size, normalize=True, dropout=0.0):\n","        super(UnetDown, self).__init__()\n","        layers = [nn.Conv2d(in_size, out_size, 4, 2, 1, bias=False)]\n","        if normalize:\n","            layers.append(nn.InstanceNorm2d(out_size))\n","        layers.append(nn.LeakyReLU(0.2))\n","        if dropout:\n","            layers.append(nn.Dropout(dropout))\n","        self.model = nn.Sequential(*layers)\n","\n","    def forward(self, x):\n","        return self.model(x)\n","\n","\n","class UnetUp(nn.Module):\n","    def __init__(self, in_size, out_size, dropout=0.0):\n","        super(UnetUp, self).__init__()\n","        layers = [\n","            nn.ConvTranspose2d(in_size, out_size, 4, 2, 1, bias=False),\n","            nn.InstanceNorm2d(out_size),\n","            nn.ReLU(inplace=True),\n","        ]\n","        if dropout:\n","            layers.append(nn.Dropout(dropout))\n","\n","        self.model = nn.Sequential(*layers)\n","\n","    def forward(self, x, skip_input):\n","        x = self.model(x)\n","        x = torch.cat((x, skip_input), 1)\n","\n","        return x\n","\n","class ResidualConvBlock(nn.Module):\n","    def __init__(\n","        self, in_channels: int, out_channels: int, is_res: bool = False\n","    ) -> None:\n","        super().__init__()\n","        '''\n","        standard ResetNet style convolutional block\n","        '''\n","        self.same_channels = in_channels==out_channels\n","        self.is_res = is_res\n","        self.conv1 = nn.Sequential(\n","            nn.Conv2d(in_channels, out_channels, 3, 1, 1),\n","            nn.BatchNorm2d(out_channels),\n","            nn.GELU(),\n","        )\n","        self.conv2 = nn.Sequential(\n","            nn.Conv2d(in_channels, out_channels, 3, 1, 1),\n","            nn.BatchNorm2d(out_channels),\n","            nn.GELU(),\n","        )\n","    def forward(self, x: torch.Tensor) -> torch.Tensor:\n","        if self.is_res:\n","            x1 = self.conv1(x)\n","            x2 = self.conv2(x1)\n","            # this adds on correct residual in case channels have increased\n","            if self.same_channels:\n","                out = x + x2\n","            else:\n","                out = x1 + x2\n","            return out / 1.414\n","\n","        else:\n","            x1 = self.conv1(x)\n","            x2 = self.conv2(x1)\n","            return x2"]}]}